
snippet hello "hello" b
/* Filename: main.c
 * Description: <TODO>
 * Last modified: humble 2021-01-28 09:22:42
 */
#include <stdio.h>
#include <stdlib.h>

static void usage(void)
{
#define USAGE "Usage:\n\
	Version 1.0.0\n"
	printf(USAGE);
}

int main(int argc, char **argv)
{
	if(argc != 1){ fprintf(stderr, "argc!=1\n"); usage(); exit(1); }
	printf("hello world\n");
	usage();
	return 0;
}
endsnippet


snippet calloc "calloc()" b
${1:type_t} *${4:pointer} = calloc(${3:1}, ${2:sizeof($1)});
if($4 == NULL){ l_e("calloc($1),%s", strerror(errno));${5: return -1;} }

${0}

if($4){ free($4); $4 = NULL; }
endsnippet


snippet malloc "malloc()" b
${1:type_t} *${3:pointer} = malloc(${2:sizeof($1)});
if($3 == NULL){ l_e("malloc($1),%s", strerror(errno));${4: return -1;} }
memset($3, 0, $2);

${0}

if($3){ free($3); $3 = NULL; }
endsnippet


snippet open "open()" b
int ${3:fd} = open(${1:pathname}, ${2:O_RDWR});
if($3 < 0){ l_e("open(%s),%s", $1, strerror(errno));${4: return -1;} }

${0}

if($3 >= 0){ close($3); $3 = -1; }
endsnippet

snippet openr "openreadonly()" b
int ${3:fd} = open(${1:pathname}, ${2:O_RDONLY});
if($3 < 0){ l_e("open(%s),%s", $1, strerror(errno));${4: return -1;} }

char ${5:buff}[1024] = {0};
int ${7:len} = read($3, $5, ${6:sizeof($5)});
if($7 <= 0){ l_e("read(%d:%s)->%d,%s", $3, $1, $7, strerror(errno));${8: goto readerr;} }
l_d("read(%d:%s,%s)->%d", $3, $1, $5, $7);
${0}

readerr:
if($3 >= 0){ close($3); $3 = -1; }
endsnippet

snippet openw "openwriteonly()" b
int ${3:fd} = open(${1:pathname}, ${2:O_WRONLY});
if($3 < 0){ l_e("open(%s),%s", $1, strerror(errno));${4: return -1;} }

char ${5:buff}[1024] = {0};
int ${7:len} = write($3, $5, ${6:strlen($5)});
if($7 <= 0){ l_e("write(%d:%s)->%d,%s", $3, $1, $7, strerror(errno));${8: goto writeerr;} }
l_d("write(%d:%s,%s)->%d", $3, $1, $5, $7);
${0}

writeerr:
if($3 >= 0){ close($3); $3 = -1; }
endsnippet

snippet openrw "openreadwrite()" b
int ${3:fd} = open(${1:pathname}, ${2:O_RDWR});
if($3 < 0){ l_e("open(%s),%s", $1, strerror(errno));${4: return -1;} }

if(write($3, ${5:buff}, ${6:strlen($5)}) < 0){ l_e("write(%d:%s,%s),%s", $3, $1, $5, strerror(errno)); ${7: goto writeerr;} }
l_d("write(%d:%s,%s)", $3, $1, $5);

if(lseek($3, 0, SEEK_SET) < 0){ l_e("lseek(%d:%s),%s", $3, $1, strerror(errno));${8: goto lseekerr;} }

char ${9:buff}[1024] = {0};
int ${11:len} = read($3, $9, ${10:sizeof($9)});
if($11 <= 0){ l_e("read(%d:%s)->%d,%s", $3, $1, $11, strerror(errno));${12: goto readerr;} }
l_d("read(%d:%s,%s)->%d", $3, $1, $9, $11);
${0}

readerr:
lseekerr:
writeerr:
if($3 >= 0){ close($3); $3 = -1; }
endsnippet

snippet lseek "lseek()" b
if(lseek(${1:fd}, ${3:0}, ${2:SEEK_SET}) < 0){ l_e("lseek(%d,$3,$2),%s", $1, strerror(errno));${6: goto lseekerr;} }
l_d("lseek(%d,$3,$2),ok", $1);
${0}
$6
endsnippet


snippet read "read()" b
char $2[1024] = {0};
int ${4:len} = read(${1:fd}, ${2:buff}, ${3:sizeof($2)});
if($4 <= 0){ l_e("read(%d,$2)->%d,%s", $1, $4, strerror(errno));${7: goto readerr;} }
l_d("read(%d,%s)->%d", $1, $2, $4);
${0}
$7
endsnippet

snippet write "write()" b
char $2[1024] = {0};
sprintf($2, "hello");
int ${4:len} = write(${1:fd}, ${2:buff}, ${3:strlen($2)});
if($4 <= 0){ l_e("write(%d,$2)->%d,%s", $1, $4, strerror(errno));${5: goto writeerr;} }
l_d("write(%d,${6:%s},%d)->%d", $1, ${7:buff}, $3, $4);
${0}
$5
endsnippet


snippet close "close()" b
if($1 >= 0){ close(${1:fd}); $1 = -1; }
${0}
endsnippet


snippet tailq "tailq" b
typedef struct _$1 ${1:worknode_t};
struct _$1{
    char key[256];
    int32_t len;
    void *buff; //${0:TODO}
    TAILQ_ENTRY(_$1) ${2:worktailq_entry};
};

TAILQ_HEAD(${3:worktailq_head}, _$1)   ${4:workhead};
static pthread_mutex_t ${5:workmutex} = PTHREAD_MUTEX_INITIALIZER;

//入队
$1 *node = calloc(1, sizeof($1));
if(node == NULL){ l_e("calloc($1),%s", strerror(errno)); goto callocnodeerr; }
l_d("calloc(node)->%p", node);

sprintf(node->key, "hello"); //TODO
node->len = 1024;
node->buff = calloc(1, node->len);
if(node->buff == NULL){ l_e("calloc(node->buff),%s", strerror(errno)); goto callocnodebufferr; }
l_d("calloc(node->buff:%d)->%p", node->len, node->buff);
memcpy(node->buff, /*TODO*/, node->len);

pthread_mutex_lock(&$5); l_d("locked $4 tailq");
#if 0
worknode_t *fnode = NULL;
TAILQ_FOREACH(fnode, &$4, $2) {
    if(!strcmp(fnode->key, node->key)){
        l_i("fnode[%s] == node[%s]", fnode->key, node->key);
        break;
    }
    else{ l_d("fnode[%s] != node[%s]", fnode->key, node->key); }
}
if(!fnode){ TAILQ_INSERT_TAIL(&$4, node, $2); l_i("TAILQ_INSERT_TAIL($4, %p, $2)", node); }
#else
TAILQ_INSERT_TAIL(&$4, node, $2); l_i("TAILQ_INSERT_TAIL($4, %p, $2)", node);
#endif
pthread_mutex_unlock(&$5); l_d("unlocked $4 tailq");

return 0;
othererr:
if(node->buff){ l_d("free(node->buff:%p)", node->buff); free(node->buff); node->buff = NULL; }
callocnodebufferr:
if(node){ l_d("free(node:%p)", node); free(node); node = NULL; }
callocnodeerr:

//出队
while(1){
    if(!TAILQ_EMPTY(&$4)){
        $1 *node = TAILQ_FIRST(&$4);
        pthread_mutex_lock(&$5);
        TAILQ_REMOVE(&$4, node, $2);
        pthread_mutex_unlock(&$5);

        l_d("node->len:%d", node->len); //TODO with node

        if(node->buff){ l_d("free(node->buff:%p)", node->buff); free(node->buff); node->buff = NULL; }
        if(node){ l_d("free(node:%p)", node); free(node); node = NULL; }
    }
}
endsnippet


snippet nanosleep "nanosleep()" b
struct timespec slptm = { .tv_sec = ${1:秒}, .tv_nsec = ${2:5000000/*纳秒,5ms*/} };
nanosleep(&slptm, NULL);
endsnippet


snippet popen "popen()" b
FILE *p = popen("${1:ifconfig eth0.1|grep 'HWaddr'|awk '{print $5}'|tr -d ':'}", "r");
if(!p){ l_e("popen(),'%s'", strerror(errno)); goto popenerr; }
int len = fread(${2:prbuff}, 1, ${3:sizeof($2)}, p);
if(p){ pclose(p); p = NULL; }
if(len <= 0){ l_e("fread(%s)->%d,failed", $2, len); }
else{ $2[--len] = 0; }
${0}
popenerr:
endsnippet


snippet read "read()" b
char rbuff[LEN4BUFF] = {0};
int len = read(${1:fd}, rbuff, sizeof(rbuff));
if(len < 0){
	if(errno == EINTR){ ${2:continue;} }
	l_e("read(%d)->%d,%s", $1, len, strerror(errno));
	goto readerr;
}
else if(len == 0){ l_i("read(%d)->0,EOF", $1); }
else{
	${0:TODO}
	${3:break;}
}
endsnippet


snippet recvfrom "recvfrom()" b
char rbuff[LEN4BUFF] = {0};
int len = recvfrom(${1:fd}, rbuff, sizeof(rbuff), 0, (void *)&raddr, &raddr_len);
if(len < 0) { l_e("recvfrom(%d)->%d,%s", $1, len, strerror(errno)); goto recvfromerr; }
else if(len == 0) { ${2:continue;} }
${0:TODO}
recvfromerr:
endsnippet


snippet selectread "select to read" b
int cnt = ${1:3};
while(cnt--){
	fd_set rset;
	FD_ZERO(&rset);
	FD_SET(${2:sd}, &rset);
	struct timeval timeout = { .tv_sec = ${3:1}, .tv_usec = ${4:0} };
	int rc = select($2 + 1, &rset, NULL, NULL, &timeout);
	if(rc == 0){ l_e("Timeout"); continue; }
	else if(rc < 0){
		if(errno == EINTR){ continue; }
		l_e("select(%d)->%d,%s", $2, rc, strerror(errno));
		goto selecterr;
	}
	if(FD_ISSET($2, &(rset))){
		char rbuff[LEN4BUFF] = {0};
		int len = read($2, rbuff, sizeof(rbuff));
		if(len < 0){
			if(errno == EINTR){ continue; }
			l_e("read(%d)->%d,%s", $2, len, strerror(errno));
			goto readerr;
		}
		else if(len == 0){ l_i("read(%d)->0,EOF", $2); }
		else{
			${0:TODO}
			break;
		}
	}
}
selecterr:
readerr:
endsnippet


snippet pthread_mutex_t "pthread_mutex_t" b
static pthread_mutex_t ${1:my}mutex = PTHREAD_MUTEX_INITIALIZER;

pthread_mutex_lock(&$1mutex);
l_d("pthread_mutex_lock(&$1mutex)");

if(pthread_mutex_trylock(&$1mutex)){ l_d("pthread_mutex_trylock(&$1mutex),failed"); ${2:return -2;} }
l_d("pthread_mutex_trylock(&$1mutex)");

pthread_mutex_unlock(&$1mutex);
l_d("pthread_mutex_unlock(&$1mutex)");
endsnippet


snippet pthread_create "pthread_create()" b
void *thr_${1}(void *arg)
{
	pthread_t tid = pthread_self();
	pthread_detach(tid);
	while(1){
		TODO
	}
	pthread_exit(NULL);
}

pthread_t tid_$1;
err = pthread_create(&tid_$1, NULL, thr_$1, NULL);
if(err){ l_e("pthread_create(thr_$1):%s", strerror(err)); exit(1); }

${0}
err = pthread_cancel(tid_$1);
if(err){ l_e("pthread_cancel(%lld):%s", (long long)tid_$1, strerror(err)); }
else{ l_d("pthread_cancel(%lld)", (long long)tid_$1); }
endsnippet


snippet socketudpclient "socketudpclient()" b
int ret = -1;
int ${1:sd} = socket(AF_INET, SOCK_DGRAM, 0/*IPPROTO_UDP*/);
if($1 < 0){ l_e("socket(),%s", strerror(errno)); ${2:goto socketerr;} }

struct sockaddr_in raddr;
raddr.sin_family = AF_INET;
raddr.sin_port = htons(${3:12000});
inet_pton(AF_INET, "${4:RemoteIP}", &raddr.sin_addr);

const char *wbuff = "helloworld";
if(sendto($1, wbuff, strlen(wbuff), 0, (void *)&raddr, sizeof(raddr)) < 0){ l_e("sendto(%d,%s),%s", $1, wbuff, strerror(errno)); goto sendtoerr; }

socklen_t raddr_len = sizeof(raddr);
int cnt = 3;
while(cnt--){
	struct timeval timeout = { .tv_sec = 1, .tv_usec = 0 };
	fd_set rset;
	FD_ZERO(&rset);
	FD_SET($1, &rset);
	if(select($1 + 1, &rset, NULL, NULL, &timeout) < 0){
		if(errno == EINTR){ continue; }
		l_e("select(%d),%s", $1, strerror(errno)); goto selecterr;
	}
	if(FD_ISSET($1, &(rset))){
		int len = recvfrom($1, ${5:rbuff}, ${6:sizeof(rbuff)}, 0, (void *)&raddr, &raddr_len);
		if(len == 0) { continue; }
		if(len < 0) { l_e("recvfrom(%d),%s", $1, strerror(errno)); goto recvfromerr; }
		else{ ret = 0; break; }
	}
}

${0}

recvfromerr:
selecterr:
sendtoerr:
if($1 >= 0){ close($1); $1 = -1; }
socketerr:
return ret;
endsnippet

snippet socketudpserver "socketudpserver()" b
//创建UDP服务端
int ${1:sd} = socket(AF_INET, SOCK_DGRAM, 0/*IPPROTO_UDP*/);
if($1 < 0){ l_e("socket() %s", strerror(errno)); exit(1); }

struct sockaddr_in laddr,raddr;
laddr.sin_family = AF_INET;
laddr.sin_port = htons(${2:12000});
inet_pton(AF_INET, "0.0.0.0", &laddr.sin_addr);
if(bind($1, (void *)&laddr, sizeof(laddr)) < 0){ l_e("bind($2),%s", strerror(errno)); exit(1); }

char buff[BUFFLEN] = {0};
socklen_t raddr_len = sizeof(raddr);
int len = 0;
while(1){
	if(need_termination){ break; }
	struct timeval timeout = { .tv_sec = 3, .tv_usec = 0 };
	fd_set rset;
	FD_ZERO(&rset);
	FD_SET($1, &rset);
	if(select($1 + 1, &rset, NULL, NULL, &timeout) < 0){
		if(errno == EINTR){ continue; }
		l_e("select(%d) %s", $1, strerror(errno)); exit(1);
	}
	if(FD_ISSET($1, &(rset))){
		memset(buff, 0, BUFFLEN);
		len = recvfrom($1, buff, BUFFLEN, 0, (void *)&raddr, &raddr_len);
		if(len == 0) { continue; }
		if(len < 0) { l_e("recvfrom(%d) %s", $1, strerror(errno)); exit(1); }

		char ipstr[INET_ADDRSTRLEN] = {0};
		inet_ntop(AF_INET, &raddr.sin_addr, ipstr, INET_ADDRSTRLEN);
		l_d("recvfrom(%d:%s:%d[%s])", $1, ipstr, ntohs(raddr.sin_port), buff);
		${0:TODO Something here}
	}
}

if($1 >= 0){ close($1); $1 = -1; }
endsnippet

snippet sockettcpclient "sockettcpclient()" b
int ret = -1;
int ${1:sd} = socket(AF_INET, SOCK_STREAM, 0/* IPPROTO_TCP,IPPROTO_SCTP */);
if($1 < 0){ l_e("socket(),%s", strerror(errno)); ${2:goto socketerr;} }

//bind()可省
int val = 1;
if(setsockopt($1, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)) < 0){ l_e("setsockopt(%d),%s", $1, strerror(errno)); goto setsockopterr; }
struct sockaddr_in laddr;
laddr.sin_family = AF_INET;
laddr.sin_port = htons(${2:12000});
laddr.sin_addr.s_addr = htonl(INADDR_ANY); //inet_pton(AF_INET, "0.0.0.0", &laddr.sin_addr);
if(bind($1, (void *)&laddr, sizeof(laddr)) < 0){ l_e("bind(%d),%s", $1, strerror(errno0); goto binderr; }

struct sockaddr_in raddr;
raddr.sin_family = AF_INET;
raddr.sin_port = htons(${3:12000});
inet_pton(AF_INET, "${4:RemoteIP}", &raddr.sin_addr);

if(connect($1, (void *)&raddr, sizeof(raddr)) < 0){ l_e("connect(%d:$4:$3),%s", $1, strerror(errno)); goto connecterr; }

${0://read and write}

setsockopterr:
binderr:
connecterr:
if($1 >= 0){ close($1); $1 = -1; }
socketerr:
return ret;
endsnippet


snippet termination "termination function" b
static void termination(int sig) { l_i("stoping"); need_termination = 1; }
endsnippet

snippet maindaemon "main daemon" b
/* Filename: main.c
 * Description: <TODO>
 * Last modified: LiZhihong 2021-11-12 09:36
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <errno.h>
#include <getopt.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <linux/limits.h>
#include 'pidfile.h"
#include 'l.h"

#define PID_FILE    "/var/run/%s.pid"
#define OUT_FILE    "/tmp/%s_%d%d%d_%d%d%d.log"
//#define mainl_d(fmt, ...) l_d("[main] " fmt , ##__VA_ARGS__);

static int need_start = 0, need_stop = 0, need_daemon = 1, need_termination = 0;
static char pid_file[PATH_MAX];
int pid = -1;
int loglevel = 6;

static int get_opt(int argc, char **argv);
static void termination(int sig);
static int daemonize(void);
static void usage(void);

int main(int argc, char **argv)
{
	if(argc == 1){ usage(); return 0; }
	int old_pid;
	if (get_opt(argc, argv)) { return (-1); }
	sprintf(pid_file, PID_FILE, PROG);
	if (check_pid(pid_file)) {
		old_pid = read_pid(pid_file);
		if (need_stop) {
			if(kill(old_pid, SIGTERM) < 0){ fprintf(stderr, "kill():%s\n", strerror(errno)); }
			else { printf(PROG " (%d) Stop.\n", old_pid); }
		}
		else {
			fprintf(stderr, PROG " (%d) was already run.\n", old_pid);
			return (-1);
		}
	}
	else { remove_pid(pid_file); }

	if (need_stop) { return (0); }
	if (need_daemon) {
		if (!daemonize()) { printf("Daemonizing succeeds.\n"); }
		else { fprintf(stderr, "Deamonizing failed.\n"); }
	}
	if(0 == write_pid(pid_file)){ return (-1); }
	signal(SIGTERM, termination);

	pid = getpid();
	openlog(PROG, LOG_PID, LOG_DAEMON);
	setlogmask(LOG_UPTO(loglevel));

	${0}

	closelog();
	return 0;
}

static int get_opt(int argc, char **argv)
{
	int opt;
	struct option long_opts[] = {
		{"help",       0,  NULL,  'h'},
		{"stop",       0,  NULL,  'S'},
		{"start",      0,  NULL,  's'},
		{"foreground", 0,  NULL,  'f'},
		{"logLevel",   1,  NULL,  'L'},
		{"Version",    0,  NULL,  'V'},
		{0,            0, 0, 0}
	};

	while ((opt = getopt_long(argc, argv, "hSsfL:V", long_opts, NULL)) != -1) {
		switch (opt) {
			case 'S': need_stop = 1; break;
			case 's': need_start = 1; break;
			case 'f': need_daemon = 0; break;
			case 'L': loglevel = atoi(optarg); break;
			case 'V': printf(PROG " - " VER "\n"); return -1;
			case '?':
			case 'h':
			default:  usage(); return -1;
		}
	}

	if (!need_start && !need_stop) { usage(); return (-1); }
	return (0);
}

static void termination(int sig) { l_i("stoping"); need_termination = 1; }

static int daemonize(void)
{
	char out_file[PATH_MAX];
	int pid;

	pid = fork();
	if (pid == -1) { return (-1); }
	else if (pid != 0) { exit(0); }
	setsid();

	pid = fork();
	if (pid == -1) { return (-1); }
	else if (pid != 0) { exit(0); }

	signal(SIGTTOU, SIG_IGN);
	signal(SIGTTIN, SIG_IGN);
	signal(SIGTSTP, SIG_IGN);
	signal(SIGHUP, SIG_IGN);
	signal(SIGCHLD, SIG_IGN);

	close(0);
	close(1);
	close(2);

	open("/dev/null", O_RDWR);
	time_t now = time(NULL);
	struct tm t;
	localtime_r(&now, &t);
	sprintf(out_file, OUT_FILE, PROG, t.tm_year+1900, t.tm_mon+1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
	open(out_file, O_WRONLY|O_CREAT|O_TRUNC, 0600);
	open(out_file, O_WRONLY|O_CREAT|O_TRUNC, 0600);
	chdir("/");
	umask(0);
	return (0);
}

static void usage(void)
{
#define USAGE \
PROG" -<hsSc:> -[f]\n\
  -h, --help,            print this manual\n\
  -s, --start,           start the process\n\
  -S, --stop,            stop the process\n\
  -f, --foreground,      start without daemonized\n\
  -L, --logLevel <0-7>,  0-Emergency...6-Informational,7-Debug\n\
  -V, --Version,         show the version\n\
e.g.\n\
  # start the process without daemonized\n\
    "PROG" -sf\n\
  # Stop the process\n\
    "PROG" -S\n\
Version:"VER"\n"
    printf(USAGE);
}
endsnippet

snippet l.h "l.h" b
/*******************************************************************************
MIT License

Copyright (c) 2021 Zhihong Li <humble_zh@163.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*******************************************************************************/
#ifndef __L_H__
#define __L_H__
#include <stdio.h>
#include <syslog.h>
#include <time.h>

extern int pid;
extern int loglevel; //0 Emergency,1 Alert,2 Critical,3 Error,4 Warning,5 Notice,6 Informational,7 Debug

#define l_e(fmt, arg...) do\
{\
	time_t _now = time(NULL);\
	struct tm _t;\
	localtime_r(&_now, &_t);\
	if(loglevel >= 3){ fprintf(stderr, "%d-%d-%d %d:%d:%02d [%d] ERROR %s:%d " fmt "\n", _t.tm_year+1900, _t.tm_mon+1, _t.tm_mday, _t.tm_hour, _t.tm_min, _t.tm_sec, pid, __FUNCTION__, __LINE__, ## arg); }\
	syslog(LOG_ERR, "ERROR %s:%d " fmt, __FUNCTION__, __LINE__, ## arg);\
} while (0)

#define l_w(fmt, arg...) do\
{\
	time_t _now = time(NULL);\
	struct tm _t;\
	localtime_r(&_now, &_t);\
	if(loglevel >= 4){ printf("%d-%d-%d %d:%d:%02d [%d] WARNING %s:%d " fmt "\n", _t.tm_year+1900, _t.tm_mon+1, _t.tm_mday, _t.tm_hour, _t.tm_min, _t.tm_sec, pid, __FUNCTION__, __LINE__, ## arg); }\
	syslog(LOG_WARNING, "WARNING %s:%d " fmt, __FUNCTION__, __LINE__, ## arg);\
} while (0)

#define l_n(fmt, arg...) do\
{\
	time_t _now = time(NULL);\
	struct tm _t;\
	localtime_r(&_now, &_t);\
	if(loglevel >= 5){ printf("%d-%d-%d %d:%d:%02d [%d] NOTICE %s:%d " fmt "\n", _t.tm_year+1900, _t.tm_mon+1, _t.tm_mday, _t.tm_hour, _t.tm_min, _t.tm_sec, pid, __FUNCTION__, __LINE__, ## arg); }\
	syslog(LOG_NOTICE, "NOTICE %s:%d " fmt, __FUNCTION__, __LINE__, ## arg);\
} while (0)

#define l_i(fmt, arg...) do\
{\
	time_t _now = time(NULL);\
	struct tm _t;\
	localtime_r(&_now, &_t);\
	if(loglevel >= 6){ printf("%d-%d-%d %d:%d:%02d [%d] INFO %s:%d " fmt "\n", _t.tm_year+1900, _t.tm_mon+1, _t.tm_mday, _t.tm_hour, _t.tm_min, _t.tm_sec, pid, __FUNCTION__, __LINE__, ## arg); }\
	syslog(LOG_INFO, "INFO %s:%d " fmt, __FUNCTION__, __LINE__, ## arg);\
} while (0)

#define l_d(fmt, arg...) do\
{\
	time_t _now = time(NULL);\
	struct tm _t;\
	localtime_r(&_now, &_t);\
	if(loglevel >= 7){ printf("%d-%d-%d %d:%d:%02d [%d] DEBUG %s:%d " fmt "\n", _t.tm_year+1900, _t.tm_mon+1, _t.tm_mday, _t.tm_hour, _t.tm_min, _t.tm_sec, pid, __FUNCTION__, __LINE__, ## arg); }\
	syslog(LOG_DEBUG, "DEBUG %s:%d " fmt, __FUNCTION__, __LINE__, ## arg);\
} while (0)

#endif /* ifndef __L_H__ */
endsnippet


snippet sigterm_handler "sigterm_handler" b
static void sigterm_handler(int signal) { l_i("stoping"); event_base_loopbreak(dev.base); }

${0}
endsnippet

snippet proginit "program init" b
log_open(PROG);
if (!uci_check_bool(PROG ".enable")) { l_d(PROG " has not enabled"); return 0; }
if (daemon(0, 0) < 0) { l_e(PROG " daemon() failed"); exit(1); }
if (daemon_check_running("/var/run/" PROG ".pid")) { l_e(PROG " was already run"); exit(1); }
l_i(PROG " runing succeeds");
signal(SIGTERM, sigterm_handler);
if (0 >= ${1:conf_init}()) { exit(1); }

${0}
endsnippet


snippet evinit "event init" b
${1:base} = event_base_new();
if($1 == NULL) { l_e("event_base_new() failed"); ${2:return -1;} }
${0}
//move it
event_base_dispatch($1); //loop
//move it
event_base_free($1);
endsnippet

snippet evtimer "eventtimer" b
struct timeval tv = { .tv_sec = 1, .tv_usec = 0 };
event_assign(&${1:event}, ${2:event_base}, -1, EV_TIMEOUT, ${3:CallbackFunc}, ${4:CallbackFuncArg});
event_add(&$1, &${5:timeval});
${0}
endsnippet

snippet mosqfun "mosqfun" b
static int32_t connected = 0;
static uint32_t pub_cnt = 0;

static void mosq_cb_on_connect(struct mosquitto *mosq, void *obj, int rc)
{
	l_d("MQTT connected");
	connected = 1;
	//should we subscribe some topics??
}

static void mosq_cb_on_disconnect(struct mosquitto *mosq, void *obj, int rc)
{
	int rec_rc;
	connected = 0;

	rec_rc = mosquitto_reconnect_async(mosq);
	l_w("MQTT reconnecting in 10s");
	sleep(10);
	if (MOSQ_ERR_SUCCESS != rec_rc) {
		l_d("MQTT reconnect error:%s", mosquitto_strerror(rec_rc));
		connected = 0;
	}

	//Should we stop reconnect_async() if the Broker close the MQTT link?
	//mosquitto_loop_stop(mosq, false);
	//mosquitto_destroy(mosq);
	//mosquitto_lib_cleanup();
}

static void mosq_cb_on_sub(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos) { l_d("topic subed"); }

static void mosq_cb_on_log(struct mosquitto *mosq, void *obj, int leve_log, const char *string) { /*l_d("%s", string);*/ }

static void mosq_cb_on_pub(struct mosquitto *mosq, void *obj, int mid)
{
	l_d("MQTT Message published. count:%d", ++pub_cnt);
}

static int mosq_pub(struct mosquitto *mosq, const char *topic, int32_t payloadlen,
		const char *payload, int qos)
{
	int32_t rc;
	const char *error_string = NULL;

	if (NULL == mosq || NULL == topic || NULL == payload || payloadlen <= 0) {
		l_e("Param invalid");
		return -1;
	}

	l_d("'%s' '%s'", topic, payload);
	rc = mosquitto_publish(mosq, NULL, topic, payloadlen, payload, qos, true);
	if (MOSQ_ERR_SUCCESS != rc) {
		error_string = mosquitto_strerror(rc);
		l_e("Pub failed:%s", error_string);
		return -1;
	}

	return 0;
}

static void mosq_rcv(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)
{
	char *recv_str = (char *)message->payload;
	l_d("%s get %s %s", mosqclientid, (char *)message->topic, recv_str);
	return ;
}

${0}
endsnippet


snippet mqtt.h "mqtt.h" b
#ifndef __MQTT_H__
#define __MQTT_H__
#include <mosquitto.h>
#include <event.h>
#include <event2/util.h>

typedef enum {
	MQTT_STATE_INIT = 0,
	MQTT_STATE_CONNECTING,
	MQTT_STATE_DISCONNECTED,
	MQTT_STATE_RECONNECTING,
	MQTT_STATE_RUNING,
	MQTT_STATE_END
}mqtt_state_t;

typedef int mqtt_task_cb(void *);

#define MQTT_BASEATTRIBUTES \
	char *addr;\
int32_t port;\
char *clientid;\
bool clean_session;\
char *usr;\
char *pwd;\
int32_t keepalive;\
int8_t qos;\
struct mosquitto *mosq;\
mqtt_state_t state;\
int8_t isconnected;\
struct event fsmev;\
struct timeval taskinterval;\
mqtt_task_cb *taskcb;\
void *taskarg;


typedef struct {
	MQTT_BASEATTRIBUTES
		int32_t pub_cnt;
	const char *subtopic;
	const char *pubtopic;
}mqtt_t;

//callback function
extern void mosq_cb_on_connect(struct mosquitto *mosq, void *obj, int rc);
extern void mosq_cb_on_disconnect(struct mosquitto *mosq, void *obj, int rc);
extern void mosq_cb_on_sub(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos);
extern void mosq_cb_on_unsub(struct mosquitto *mosq, void *obj, int mid);
extern void mosq_cb_on_log(struct mosquitto *mosq, void *obj, int level, const char *str);
extern void mosq_cb_on_pub(struct mosquitto *mosq, void *obj, int mid);
extern void mosq_rcv(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message);

extern int mosq_pub(struct mosquitto *mosq, const char *topic, int32_t payloadlen, const char *payload, int qos);
extern void mqtt_fsm_cb(evutil_socket_t fd, short event, void *user_data);

#endif //__MQTT_H__
endsnippet


snippet mqtt.c "mqtt.c" b
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <mosquitto.h>
//#include <json/json.h>
#include "mqtt.h"
#include "l.h"


void mosq_cb_on_connect(struct mosquitto *mosq, void *obj, int rc)
{
	mqtt_t *mqttptr = (mqtt_t *)obj;
	mqttptr->isconnected = 1;
	mqttptr->state = MQTT_STATE_RUNING;
	l_d("%s MQTT connected", mqttptr->clientid);
	//should we subscribe some topics??
}

void mosq_cb_on_disconnect(struct mosquitto *mosq, void *obj, int rc)
{
	mqtt_t *mqttptr = (mqtt_t *)obj;
	mqttptr->isconnected = 0;
	mqttptr->state = MQTT_STATE_DISCONNECTED;
	l_w("MQTT on_disconnect");
}

void mosq_cb_on_sub(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos) { l_d("topic subed"); }

void mosq_cb_on_unsub(struct mosquitto *mosq, void *obj, int mid) { l_d("topic unsubed"); }

void mosq_cb_on_log(struct mosquitto *mosq, void *obj, int level, const char *str) { /*l_d("%s", str);*/ }

void mosq_cb_on_pub(struct mosquitto *mosq, void *obj, int mid) { l_d("msg pubed.mid:%d", mid); }

void mosq_rcv(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message) { l_i("%s %s", (char *)message->topic, (char *)message->payload); }


#if 0
int mosq_pub(struct mosquitto *mosq, const char *topic, int32_t payloadlen, const char *payload, int qos)
{
	int32_t rc;
	const char *error_string = NULL;

	if (NULL == mosq || NULL == topic || NULL == payload || payloadlen <= 0) {
		l_e("Param invalid");
		return -1;
	}

	l_i("%s %s qos%d", topic, payload, qos);
	rc = mosquitto_publish(mosq, NULL, topic, payloadlen, payload, qos, true);
	if (MOSQ_ERR_SUCCESS != rc) {
		error_string = mosquitto_strerror(rc);
		l_e("Pub failed:%s", error_string);
		return -1;
	}

	return 0;
}
#endif


void mqtt_fsm_cb(evutil_socket_t fd, short event, void *user_data)
{
	int rc;
	struct timeval tv;
	mqtt_t *mqttptr = (mqtt_t *)user_data;

	switch (mqttptr->state) {
		case MQTT_STATE_INIT:
		case MQTT_STATE_CONNECTING:
			rc = mosquitto_connect_async(mqttptr->mosq, mqttptr->addr, mqttptr->port, mqttptr->keepalive);
			if (MOSQ_ERR_SUCCESS == rc) {  l_d("mosquitto_connect_async() rc %d", rc); }
			else { l_w("mosquitto_connect_async() failed:rc %d, %s, reconnecting", rc, mosquitto_strerror(rc)); }
			mqttptr->state = MQTT_STATE_RECONNECTING; //connect once,then reconnect always if needed
			tv.tv_sec = 5; tv.tv_usec = 0;
			break;

		case MQTT_STATE_DISCONNECTED:
		case MQTT_STATE_RECONNECTING:
			rc = mosquitto_reconnect_async(mqttptr->mosq);
			if (MOSQ_ERR_SUCCESS == rc) { l_d("mosquitto_reconnect_async() rc %d", rc); }
			else { l_w("mosquitto_reconnect_async() failed:rc %d, %s, reconnecting", rc, mosquitto_strerror(rc)); }
			tv.tv_sec = 5; tv.tv_usec = 0;
			break;

		case MQTT_STATE_RUNING:
			if(mqttptr->taskcb){ mqttptr->taskcb(mqttptr->taskarg); }
			else{ l_d("MQTT runing, do nothing"); }
			tv.tv_sec = mqttptr->taskinterval.tv_sec;
			tv.tv_usec = mqttptr->taskinterval.tv_usec;
			break;

		default:
			l_w("Unkown MQTT_STATE_STATE:%d", mqttptr->state);
			break;
	}

	event_add(&mqttptr->fsmev, &tv); //redo
}
endsnippet


snippet mosqinit "mosqinit" b
mosquitto_lib_init();
struct mosquitto *${1:mosq} = mosquitto_new(${2:conf}.${3:serial_number}, ${4:true}, ${5:agr});
if (NULL == $1) { l_e("mosquitto_new() failed"); mosquitto_lib_cleanup(); exit(1); }

mosquitto_username_pw_set($1, $2.${6:usr}, $2.${7:pwd});
mosquitto_connect_callback_set($1, mosq_cb_on_connect);
mosquitto_disconnect_callback_set($1, mosq_cb_on_disconnect);
mosquitto_subscribe_callback_set($1, mosq_cb_on_sub);
mosquitto_publish_callback_set($1, mosq_cb_on_pub);
mosquitto_log_callback_set($1, mosq_cb_on_log);
mosquitto_message_callback_set($1, mosq_rcv);
mosquitto_will_set($1, "Message/LastWill", strlen("hello"), "hello", 1, false);

int rc = mosquitto_connect_async($1, $2.${8:addr}, $2.${9:port}, $2.${10:keepalive});
if (MOSQ_ERR_SUCCESS != rc) { l_w("%s", mosquitto_strerror(rc)); }
else { /* mqtt_publish($1, $2.topic, strlen($2.payload), $2.payload, 1); */ }

l_d("start to loop");
mosquitto_loop_start($1);

${0}

mosquitto_loop_stop($1, false);
mosquitto_destroy($1);
mosquitto_lib_cleanup();
endsnippet


snippet setitimer "setitimer()" b
static volatile int loop = 0;

signal(SIGALRM, alrm_handler);

struct itimerval itv = {
	.it_value = { .tv_sec = ${1:conf.interval}, .tv_usec = 0 },//firstly
	.it_interval = { .tv_sec = ${2:conf.interval}, .tv_usec = 0 } //reset to
};
if (0 > setitimer(ITIMER_REAL, &itv, NULL)) { l_e("setitimer() failed"); exit(1); }

while (1) {
	while (0 == loop) { pause(); }
	loop = 0;
	if (connected) {
		${0:do sth}
	}
}
endsnippet


snippet ugs "uci_get(string)" b
conf.${1:element} = (char *)uci_get(PROG ".$1");
if (NULL == conf.$1) { l_e("get " PROG ".$1 failed"); return ERROR; }
l_d("get " PROG ".$1 \"%s\"", conf.$1);

${0}
endsnippet


snippet ugi "uci_get(int)" b
tmpptr = (char *)uci_get(PROG ".${1:element}");
if (NULL == tmpptr) { l_e("get " PROG ".$1 failed"); return ERROR; }
conf.$1 = atoi(tmpptr);
l_d("get " PROG ".$1 %d", conf.$1);

${0}
endsnippet

snippet set "set()" b
endsnippet
